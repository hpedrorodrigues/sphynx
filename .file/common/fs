#!/usr/bin/env bash

## Functions

function extract() {
  sx compression extract "${*}"
}

function mkd() {
  mkdir -p "${*}" && cd "${_}" || exit
}

function dag() {
  tree \
    -aC \
    -I '.DS_Store|.git|.idea|build|node_modules|target|vendor|__pycache__' \
    --dirsfirst "${*:-.}"
}

# touch executable
function te() {
  local -r func_name="${FUNCNAME[0]:-${funcstack[1]}}"
  local -r file_name="${1}"

  if [ -z "${file_name}" ]; then
    echo '!!! This function needs a file name as first argument' >&2
    echo "!!! i.e ${func_name} new_executable_file" >&2
    return 1
  fi

  if [ -f "${file_name}" ]; then
    echo "!!! File \"${file_name}\" already exists" >&2
    return 1
  fi

  echo -e '#!/usr/bin/env bash\n' >"${file_name}" \
    && chmod +x "${file_name}"
}

function up() {
  local -r func_name="${FUNCNAME[0]:-${funcstack[1]}}"
  local -r n="${1}"

  if [ -z "${n}" ] || ! [[ ${n} =~ ^[0-9]+$ ]]; then
    echo '!!! You should pass a number to this function' >&2
    echo "!!! i.e ${func_name} 3 (to navigate up 3 directories)" >&2
    return 1
  elif [[ ${n} -le 1 ]]; then
    cd .. || return 1
  else
    local dirs
    # shellcheck disable=SC2051  # Bash doesn't support variables in brace range expansions
    for _ in {1..${n}}; do
      dirs="../${dirs}"
    done

    cd "${dirs}" || return 1
  fi
}

function fs() {
  if du -b /dev/null >/dev/null 2>&1; then
    local -r args='-sbh'
  else
    local -r args='-sh'
  fi

  if [[ -n ${*} ]]; then
    du "${args}" -- "${@}"
  else
    du "${args}" .[^.]* ./*
  fi
}

function eachdir() {
  local -r func_name="${FUNCNAME[0]:-${funcstack[1]}}"
  local -r command="${1}"
  local -r directory_path="${2:-.}"

  if [ -z "${command}" ]; then
    echo '!!! This function needs a command as first argument' >&2
    echo "!!! i.e ${func_name} 'ls -la'" >&2
    return 1
  fi

  while IFS= read -r directory; do
    if [ -d "${directory}" ]; then
      (
        cd "${directory}" \
          && echo -e "\n|---> \"${directory}\"\n" \
          && ${SHELL} -i -c "${command}; exit \$?"
      )
    else
      echo "!!! No such directory \"${directory}\"" >&2
    fi
  done < <(
    find "${directory_path}" -maxdepth 1 -type d ! -path "${directory_path}"
  )
}
