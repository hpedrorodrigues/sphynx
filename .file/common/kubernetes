#!/usr/bin/env bash

## Aliases

alias k='kubectl'
alias sk='kubectl --namespace kube-system'
alias pk='kubectl --namespace kube-public'
alias mk='kubectl --namespace monitoring'
alias nlk='kubectl --namespace kube-node-lease'

# e.g. kx pods.spec
# e.g. kx deploy.spec.template.spec
alias kx='kubectl explain'
alias kxr='kubectl explain --recursive'

# Kubernetes API Query
# e.g. kq /apis
# e.g. kq /healthz/etcd
# e.g. kq /logs/kube-apiserver.log
# e.g. kq /apis/metrics.k8s.io/v1beta1/nodes
alias kq='kubectl get --raw'

alias kk='kubectl krew'

alias ks='sx kubernetes ls'
alias kd='sx kubernetes describe'
alias ke='sx kubernetes edit'
alias kex='sx kubernetes exec'
alias kg='sx kubernetes get'
alias kl='sx kubernetes logs'
alias kns='sx kubernetes namespace'
alias ktx='sx kubernetes context'
alias krs='sx kubernetes rollout status'
alias krr='sx kubernetes rollout restart'
alias krh='sx kubernetes rollout history'
alias kpf='sx kubernetes port-forward'
alias kto='sx kubernetes topology'

alias kc='kubectl top pods --sort-by=cpu --all-namespaces'
alias km='kubectl top pods --sort-by=memory --all-namespaces'

## Functions

# Run a command in all namespaces
function ka() {
  kubectl "${@}" --all-namespaces
}

function kimg() {
  # shellcheck disable=SC2016  # Expressions don't expand in single quotes, use double quotes for that
  local -r template='
  {{range .items}}
    {{$namespace := .metadata.namespace}}
    {{$name := .metadata.name}}
    {{"NAMESPACE"}}{{","}}{{"POD"}}{{","}}{{"IMAGE"}}{{"\\n"}}
    {{range .spec.containers}}
      {{$namespace}}{{","}}{{$name}}{{","}}{{.image}}{{"\\n"}}
    {{end}}
  {{end}}'
  local -r cleared_template="$(
    echo -n "${template}" \
      | tr '\n' ' ' \
      | sed 's/}} *{{/}}{{/g' \
      | sed 's/^ *//g'
  )"

  # shellcheck disable=SC2068  # Double quote array expansions
  kubectl get pods \
    --template="${cleared_template}" \
    ${@} \
    | sort -u \
    | column -t -s ','
}

function kgp() {
  # shellcheck disable=SC2068  # Double quote array expansions
  kubectl get pods \
    ${@} \
    | GREP_COLOR='01;32' grep --color=always -E 'Completed|$' \
    | GREP_COLOR='01;32' grep --color=always -E 'Running|$' \
    | GREP_COLOR='01;33' grep --color=always -E 'ContainerCreating|$' \
    | GREP_COLOR='01;33' grep --color=always -E 'Pending|$' \
    | GREP_COLOR='01;33' grep --color=always -E 'Terminating|$' \
    | GREP_COLOR='01;31' grep --color=always -E 'CreateContainerConfigError|$' \
    | GREP_COLOR='01;31' grep --color=always -E 'ErrImagePull|$' \
    | GREP_COLOR='01;31' grep --color=always -E 'Init:Error|$' \
    | GREP_COLOR='01;31' grep --color=always -E 'Error|$' \
    | GREP_COLOR='01;31' grep --color=always -E 'Init:CrashLoopBackOff|$' \
    | GREP_COLOR='01;31' grep --color=always -E 'CrashLoopBackOff|$' \
    | GREP_COLOR='01;31' grep --color=always -E 'ImagePullBackOff|$' \
    | GREP_COLOR='01;31' grep --color=always -E 'Evicted|$'
}

# Kubernetes not running pods: print all pods not running
function knr() {
  # shellcheck disable=SC2068  # Double quote array expansions
  kubectl get pods \
    ${@} \
    --field-selector 'status.phase!=Running' \
    | grep -v 'Complete'
}

# Kubernetes node pods: print the number of pods running on each node
function knp() {
  kubectl get pods \
    --output json \
    --all-namespaces \
    | jq '.items
    | group_by(.spec.nodeName)
    | map({"nodeName": .[0].spec.nodeName, "count": length})
    | sort_by(.count)'
}

# Kubernetes secret view: print secret's data decoded
function ksv() {
  # shellcheck disable=SC2016  # Expressions don't expand in single quotes, use double quotes for that
  local -r template='
  {{"NAMESPACE"}}{{","}}{{"SECRET"}}{{","}}{{"KEY"}}{{","}}{{"VALUE"}}{{"\\n"}}
  {{range .items}}
    {{if ne .type "kubernetes.io/service-account-token"}}
      {{$namespace := .metadata.namespace}}
      {{$name := .metadata.name}}
      {{ range $k, $v := .data }}
        {{$namespace}}{{","}}{{$name}}{{","}}{{$k}}{{","}}{{ $v | base64decode}}{{"\\n"}}
      {{end}}
    {{end}}
  {{end}}'
  local -r cleared_template="$(
    echo -n "${template}" \
      | tr '\n' ' ' \
      | sed 's/}} *{{/}}{{/g' \
      | sed 's/^ *//g'
  )"

  # shellcheck disable=SC2068  # Double quote array expansions
  kubectl get secrets \
    --template="${cleared_template}" \
    ${@} \
    | while read -r line; do
      if [[ "${line}" == *','* ]]; then
        echo "${line}"
      else
        echo "-,-,-,${line}"
      fi
    done \
    | column -t -s ','
}

# Kubernetes pod ips: print pod IPs
function kpi() {
  # shellcheck disable=SC2068  # Double quote array expansions
  kubectl get pods \
    ${@} \
    --output 'custom-columns=POD:.metadata.name,IP:.status.podIPs[*].ip'
}

# Kubernetes debug: run an image to debug network issues
function kdeb() {
  local -r pod_name='debug'
  local -r pod_hash="$(uuidgen | cut -d '-' -f 1 | tr '[:upper:]' '[:lower:]')"

  kubectl run "${pod_name}-${pod_hash}" \
    --rm \
    --stdin \
    --tty \
    --image-pull-policy 'Always' \
    --restart 'Never' \
    --labels "app=${pod_name}" \
    --env 'SOURCE=sphynx' \
    --grace-period '1' \
    --image 'hpedrorodrigues/alien:debug'
}

# Access Kubernetes API-server using cURL and some service account credentials
function kurl() {
  local -r func_name="${FUNCNAME[0]:-${funcstack[1]}}"
  local -r namespace="${1:-}"
  local -r service_account="${2:-}"
  local -r uri="${3:-}"

  local -r env_file_path="/tmp/${namespace}-${service_account}-kurl.env"
  local -r cert_file_path="/tmp/${namespace}-${service_account}-kurl-ca.crt"

  if [ -z "${namespace}" ]; then
    echo '!!! This function needs a namespace as first argument' >&2
    echo "!!! e.g. ${func_name} 'kube-system' 'metrics-server' '/apis'" >&2
    return 1
  fi

  if [ -z "${service_account}" ]; then
    echo '!!! This function needs a service account as second argument' >&2
    echo "!!! e.g. ${func_name} 'kube-system' 'metrics-server' '/apis'" >&2
    return 1
  fi

  if [ -z "${uri}" ]; then
    echo '!!! This function needs an URI as third argument' >&2
    echo "!!! e.g. ${func_name} 'kube-system' 'metrics-server' '/apis'" >&2
    return 1
  fi

  if [ -s "${env_file_path}" ] && [ -s "${cert_file_path}" ]; then
    echo 'Using pre-defined configuration...'
    source "${env_file_path}"
  else
    echo 'Retrieving secret name...'
    local -r SECRET_NAME="$(
      kubectl get serviceaccounts "${service_account}" \
        --namespace "${namespace}" \
        --output 'json' \
        | jq --raw-output '.secrets[].name | select(contains("token"))'
    )"
    echo 'Retrieving secret content...'
    local -r SECRET_CONTENT="$(
      kubectl get secrets "${SECRET_NAME}" \
        --namespace "${namespace}" \
        --output 'json'
    )"
    echo 'Loading secret token...'
    local -r TOKEN="$(
      echo -e "${SECRET_CONTENT}" \
        | jq --raw-output '.data.token' \
        | base64 -d
    )"
    echo 'Saving secret certificate...'
    echo -e "${SECRET_CONTENT}" \
      | jq --raw-output '.data["ca.crt"]' \
      | base64 -d >"${cert_file_path}"
    echo 'Loading API-server address...'
    local -r API_SERVER="$(
      kubectl config view \
        --minify \
        --output jsonpath="{.clusters[*].cluster.server}"
    )"
    echo 'Saving configuration...'
    echo -e "SECRET_NAME='${SECRET_NAME}'\nAPI_SERVER='${API_SERVER}'\nTOKEN='${TOKEN}'" \
      >"${env_file_path}"
  fi

  echo -e 'Requesting...\n'
  curl "${API_SERVER}${uri}" \
    --silent \
    --header "Authorization: Bearer ${TOKEN}" \
    --header "User-Agent: kurl/sphynx ($(uname))" \
    --cacert "${cert_file_path}" \
    | yq --prettyPrint --colors 'eval'
}

# Kubernetes delete replicasets: remove replicasets not being used
# Based on https://github.com/kubernetes/kubernetes/issues/24330#issuecomment-265750353
function kdrs() {
  # shellcheck disable=SC2068  # Double quote array expansions
  kubectl get replicasets \
    ${@} \
    --output json \
    | jq -r '.items[] | select(.spec.replicas | contains(0)) | "kubectl delete rs -n \(.metadata.namespace) \(.metadata.name)"' \
    | xargs -I % sh -c '%'
}

# Kubernetes get provider ID (for AWS is Availability Zone + Instance ID)
# e.g. aws:///<availability-zone>/<instance-id>
function kpvid() {
  # shellcheck disable=SC2068  # Double quote array expansions
  kubectl get nodes \
    ${@} \
    --output json \
    | jq -r '.items | map({"instanceName": .metadata.name, "instanceId": .spec.providerID})'
}
